module srt_divider_32bit (
    input clk,
    input reset,
    input start,
    input [31:0] dividend,
    input [31:0] divisor,
    output reg [31:0] quotient,
    output reg [31:0] remainder,
    output reg done
);

    reg [31:0] z;      // Dividend (copy of input dividend)
    reg [31:0] d;      // Divisor (copy of input divisor)
    reg [31:0] s;      // Partial remainder
    reg [31:0] q;      // Quotient
    reg [5:0] count;   // Counter for 32 iterations

    // State machine states
    localparam IDLE = 2'b00, CALCULATE = 2'b01, DONE = 2'b10;
    reg [1:0] state;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            quotient <= 32'b0;
            remainder <= 32'b0;
            s <= 32'b0;
            q <= 32'b0;
            count <= 6'd32;  // 32 iterations for a 32-bit division
            state <= IDLE;
            done <= 1'b0;
        end else begin
            case (state)
                IDLE: begin
                    done <= 1'b0;
                    if (start) begin
                        if (divisor == 0) begin
                            quotient <= 32'hFFFFFFFF;  // Division by zero, set quotient to -1
                            remainder <= 32'b0;        // Undefined remainder
                            done <= 1'b1;
                        end else begin
                            z <= dividend;   // Load dividend
                            d <= divisor;    // Load divisor
                            s <= 32'b0;      // Initialize partial remainder
                            q <= 32'b0;      // Initialize quotient
                            count <= 6'd32;  // Reset count for 32 iterations
                            state <= CALCULATE;
                        end
                    end
                end

                CALCULATE: begin
                    if (count > 0) begin
                        // Shift partial remainder left and bring down the next bit of dividend
                        s = {s[30:0], z[31]};
                        z = z << 1;

                        // Determine the next quotient bit based on the remainder
                        if (s >= d) begin
                            s = s - d;
                            q = {q[30:0], 1'b1};  
                        end else begin
                            q = {q[30:0], 1'b0};  
                        end

                        count = count - 1;
                    end else begin
                        quotient <= q;      // Final quotient
                        remainder <= s;     // Final remainder
                        state <= DONE;
                    end
                end

                DONE: begin
                    done <= 1'b1;
                    if (!start) begin
                        state <= IDLE;  // Return to IDLE if start is low (new calculation can start)
                    end
                end
            endcase
        end
    end
endmodule

///////////////////////////////////     TB    ///////////////////////////////

module tb_srt_divider_32bit;

    reg clk;
    reg reset;
    reg start;
    reg [31:0] dividend;
    reg [31:0] divisor;
    wire [31:0] quotient;
    wire [31:0] remainder;
    wire done;

    // Instantiate the DUT (Device Under Test)
    srt_divider_32bit uut (
        .clk(clk),
        .reset(reset),
        .start(start),
        .dividend(dividend),
        .divisor(divisor),
        .quotient(quotient),
        .remainder(remainder),
        .done(done)
    );

    // Clock generation
    always #5 clk = ~clk;

    initial begin
        // Initialize signals
        clk = 0;
        reset = 0;
        start = 0;
        dividend = 32'b0;
        divisor = 32'b0;

        // Apply reset
        reset = 1;
        #10;
        reset = 0;

        // Test Case 1: 69 / 6
        dividend = $urandom;
        divisor = $urandom;
        start = 1;
        #10;
        start = 0;

        // Wait for calculation to finish
        wait (done);
        #10;
        $display("Test Case 1: dividend = %d, divisor = %d", dividend, divisor);
        $display("Quotient = %d, Remainder = %d", quotient, remainder);

        // Test Case 2: 53 / 17
        dividend = 32'd53;
        divisor = 32'd10;
        start = 1;
        #10;
        start = 0;

        // Wait for calculation to finish
        wait (done);
        #10;
        $display("Test Case 2: dividend = %d, divisor = %d", dividend, divisor);
        $display("Quotient = %d, Remainder = %d", quotient, remainder);

        // Test Case 3: 273 / 45
        dividend = 32'd273;
        divisor = 32'd45;
        start = 1;
        #10;
        start = 0;

        // Wait for calculation to finish
        wait (done);
        #10;
        $display("Test Case 3: dividend = %d, divisor = %d", dividend, divisor);
        $display("Quotient = %d, Remainder = %d", quotient, remainder);

        // Test Case 4: 11254 / 57
        dividend = 32'd11254;
        divisor = 32'd57;
        start = 1;
        #10;
        start = 0;

        // Wait for calculation to finish
        wait (done);
        #10;
        $display("Test Case 4: dividend = %d, divisor = %d", dividend, divisor);
        $display("Quotient = %d, Remainder = %d", quotient, remainder);

        // Test Case 5: 56742 / 99
        dividend = 32'd56742;
        divisor = 32'd99;
        start = 1;
        #10;
        start = 0;

        // Wait for calculation to finish
        wait (done);
        #10;
        $display("Test Case 5: dividend = %d, divisor = %d", dividend, divisor);
        $display("Quotient = %d, Remainder = %d", quotient, remainder);

        // Test Case 6: Division by zero (56742 / 0)
        dividend = 32'd56742;
        divisor = 32'd0;
        start = 1;
        #10;
        start = 0;

        // Wait for calculation to finish
        wait (done);
        #10;
        $display("Test Case 6: dividend = %d, divisor = %d (Division by zero)", dividend, divisor);
        $display("Quotient = %d, Remainder = %d", quotient, remainder);

        // End simulation
        $finish;
    end

    initial begin
        $dumpvars;
        $dumpfile("dump.vcd");
    end
endmodule
